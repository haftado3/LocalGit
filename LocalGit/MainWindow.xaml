<Controls:MetroWindow x:Class="LocalGit.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LocalGit"
        xmlns:vm="clr-namespace:LocalGit.ViewModel"
        xmlns:cv="clr-namespace:LocalGit.Converters"
        xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
        mc:Ignorable="d"
        d:DataContext="{Binding Source={StaticResource DesignVM}}"
        Title="MainWindow" x:Name="mainWindow" Height="600" Width="800">
    <Window.Resources>
        <vm:MainViewModel x:Key="DesignVM"/>
        <cv:FileSizeConverter x:Key="SizeConverter"/>
        <cv:BooleanToVisibilityConverter x:Key="boolToVisibillityConverter"/>
        <cv:IsSmallResolution x:Key="IsSmallResolution"/>
        <!--left grids template for big resolution-->
        <DataTemplate x:Key="BigTemplate">
            <Grid Width="150" Background="Silver">
                
            </Grid>
        </DataTemplate>
        <!--left grids template for small resolution-->
        <DataTemplate x:Key="SmallTemplate">
            <Grid Width="50" Background="Sienna">
                
            </Grid>
        </DataTemplate>
    </Window.Resources>
   
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

            <!--i'm using content control here to have two different views in one control, one for small width and one for big width , i can create different views in one page using content control just bind its ContentTemplate to your view , i think ContentPresenter can do this too-->
        <ContentControl Grid.RowSpan="2">
            <ContentControl.Style>
                <Style TargetType="ContentControl">
                    <!--set contents template default value for bigtemplate-->
                    <Setter Property="ContentTemplate" Value="{StaticResource BigTemplate}"></Setter>
                    <Style.Triggers>
                        <!--check if width less than converter parameter then show small template-->
                        <DataTrigger Binding="{Binding ElementName=mainWindow,Path=Width,Converter={StaticResource IsSmallResolution},ConverterParameter=600}" Value="True">
                            <Setter Property="ContentTemplate" Value="{StaticResource SmallTemplate}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
        </ContentControl>

        <ScrollViewer Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2" Grid.RowSpan="2">
            <ItemsControl ItemsSource="{Binding Path=Items}">
                <!--styling items inside itemscontrol to have icons names and bla bla-->
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button x:Name="parentGrid" Style="{DynamicResource SquareButtonStyle}" BorderBrush="{x:Null}">
                            <Grid Width="120" Height="120" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="40"/>
                                    <RowDefinition />
                                    <RowDefinition Height="20"/>
                                </Grid.RowDefinitions>
                                <!--header for items of itemscontrol visible on mouse hover-->
                                <Grid Grid.ColumnSpan="3" Height="30" Visibility="{Binding Path=IsMouseOver, ElementName=parentGrid, Converter={StaticResource boolToVisibillityConverter}}">
                                    <StackPanel VerticalAlignment="Center" Orientation="Horizontal" FlowDirection="RightToLeft">
                                        <Button Width="25" Height="25" Margin="4,0" Foreground="{x:Null}"  BorderBrush="{x:Null}" Style="{StaticResource MaterialDesignFloatingActionMiniButton }">
                                            <iconPacks:PackIconMaterial Padding="2" Foreground="white" Kind="Delete" />
                                        </Button>
                                        <Button Width="25" Height="25" Foreground="{x:Null}"  BorderBrush="{x:Null}" Style="{StaticResource MaterialDesignFloatingActionMiniButton }">
                                            <iconPacks:PackIconMaterial Padding="2" Foreground="white" Kind="PlaylistEdit" />
                                        </Button>
                                        <Button Width="25" Height="25" Margin="4,0" Foreground="{x:Null}"  BorderBrush="{x:Null}" Style="{StaticResource MaterialDesignFloatingActionMiniButton }">
                                            <iconPacks:PackIconMaterial Padding="2" Foreground="white" Kind="ContentCopy" />

                                        </Button>
                                    </StackPanel>
                                </Grid>
                                <!--binding size from bytes to mb with converter-->
                                <TextBlock Text="{Binding Size,Converter={StaticResource SizeConverter}}" Grid.Row="2" Grid.ColumnSpan="2" FontSize="10"/>
                                <StackPanel Orientation="Vertical" Grid.Row="1" Margin="0,-4,0,4">
                                    <Image Source="{Binding Icon}" Width="40"  Height="40" />
                                    <!--binding file type with default value-->
                                    <TextBlock Text="{Binding Type,FallbackValue='Folder'}" HorizontalAlignment="Center" FontSize="9" />

                                </StackPanel>
                                <TextBlock Text="{Binding Name}" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="11"  Margin="3" TextWrapping="Wrap"  Grid.Column="1" Grid.RowSpan="3"/>
                            </Grid>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
                <!--this will make itemscontrol view to fit in horizontal scale and wrap to next line at overflow-->
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal"  />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </ScrollViewer>
    </Grid>
</Controls:MetroWindow>
